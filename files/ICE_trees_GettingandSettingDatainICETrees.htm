<!DOCTYPE html>

<!-- saved from url=(0024)http://docs.autodesk.com -->
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <meta name="product" content="SI">
      <meta name="release" content="2015">
      <meta name="book" content="GeneralUser">
      <meta name="created" content="2014-03-26">
      <meta name="topicid" content="GUID-A4868E7F-0778-40E7-8AE0-CE47282AC52D">
      <meta name="indexterm" content="ICE trees: about getting and setting data">
      <meta name="indexterm" content="ICE trees: getting data">
      <meta name="indexterm" content="ICE trees: setting data">
      <meta name="indexterm" content="references in ICE: context of">
      <meta name="indexterm" content="ICE trees: getting data">
      <meta name="indexterm" content="ICE trees: getting data at locations">
      <meta name="indexterm" content="ICE trees: getting data at the previous frame">
      <meta name="indexterm" content="ICE trees: getting data from groups">
      <meta name="indexterm" content="groups: ICE and">
      <meta name="indexterm" content="ICE trees: setting data">
      <meta name="indexterm" content="ICE: setting custom attributes">
      <meta name="topic-type" content="concept">
      <title>Getting and Setting Data in ICE Trees</title>
      <link rel="stylesheet" type="text/css" href="../style/softimage.css"><script type="text/javascript" src="../scripts/ac_common.js"></script><script type="text/javascript" src="../scripts/utils/adsk.redirect.js"></script></head>
   <body height="100%">
      <div class="body_content" id="body-content"><span class="anchor_wrapper"><a name="GUID-A4868E7F-0778-40E7-8AE0-CE47282AC52D"></a></span><div class="head">
            <h1>Getting and Setting Data in ICE Trees</h1>
         </div>
         <div class="bodyProcess">
            <p><span class="anchor_wrapper"><a name="GUID-69759DB6-C44B-4EAF-A089-D1E70000E971"></a></span>Almost every ICE tree involves getting data, performing calculations, and then setting
               data. You can get and set any data using Get Data, Set Data, and other nodes found
               in the Data Access category of the Tools tab. In addition, there are some compounds
               for getting and setting specific data in the Getters and Setters subtasks of the Particles
               and Deformations tasks in the preset manager. 
            </p><span class="anchor_wrapper"><a name="FIG_04BDDD98C6074FF896DCBBFCC9A980B4"></a></span><div class="figure-anchor"><img src="../images/GUID-B10AA025-5704-44EC-ACDF-CC562C87C212-low.png"></div>
            <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0007"></a></span> 
               <h2><span class="anchor_wrapper"><a name="GUID-B7CEA745-BB10-41B7-9314-3B092F479A13"></a></span>What You Can Get or Set
               </h2> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0008"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-247EA6EA-D312-45FD-A25F-20A97D683D55"></a></span>Types of Data in ICE
                  </h3> 
                  <p><span class="anchor_wrapper"><a name="GUID-DAC70B0C-5CD3-47B9-8FB4-F1D95204C72C"></a></span>There are three types of data you can work with in an ICE tree: intrinsic ICE data,
                     dynamic ICE data, and other scene data. 
                  </p> 
                  <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0009"></a></span> 
                     <h4><span class="anchor_wrapper"><a name="GUID-F86A583E-E0CA-49A6-B190-A0AF54FB7BC7"></a></span>Intrinsic ICE Attributes
                     </h4> 
                     <p><span class="anchor_wrapper"><a name="GUID-F5DCA310-3CFA-42AB-AF19-2C3F7FD18B40"></a></span>Intrinsic ICE attributes include component attributes that correspond to actual geometric
                        data in the scene, such as PointPosition, PointNormal, PolygonNormal, and so on. Some
                        attributes are read-write, and others are read-only. 
                     </p> 
                  </div> 
                  <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-000A"></a></span> 
                     <h4><span class="anchor_wrapper"><a name="GUID-1414DF1E-B901-4F3E-8C20-21384EA61677"></a></span>Dynamic ICE Attributes
                     </h4> 
                     <p><span class="anchor_wrapper"><a name="GUID-60E43CE1-F7A1-48E6-B519-4A2905BCDED2"></a></span>Dynamic attributes include attributes that you create and set "on the fly" and use
                        however you wish in your tree. They do not exist until you set them. 
                     </p> 
                     <p><span class="anchor_wrapper"><a name="GUID-0F9E4CBD-EE28-4937-9B05-C17C78DC107F"></a></span>Note that many of the predefined attributes are not intrinsic but actually dynamic
                        attributes that have been automatically set by certain nodes and compounds. These
                        attributes are recognized by their names — for example, the SimulateParticles node
                        recognizes the Force, PointVelocity, and Mass attributes. These predefined attributes
                        always appear in the Get Data node's explorer, even if they haven't been set or initialized
                        yet. 
                     </p> 
                     <p><span class="anchor_wrapper"><a name="GUID-ACCFB771-F441-46A9-86C2-6EAE756D4F56"></a></span>Dynamic attributes also include custom attributes. You can create your own custom
                        attributes for any purpose you wish. Many of the attributes used in the factory compounds
                        are actually custom attributes, such as AgeLimit, Init_PointVelcocity, and others.
                        See <span class="char_link"><a href="ICE_trees_GettingandSettingDatainICETrees.htm#WSB74EE070EB80114199F4C921243896F3-0022">Setting Custom Attributes</a></span>. 
                     </p> 
                  </div> 
                  <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-000B"></a></span> 
                     <h4><span class="anchor_wrapper"><a name="GUID-79F61FC5-2479-4EB3-9672-7E6F4A0C6B84"></a></span>Other Scene Data
                     </h4> 
                     <p><span class="anchor_wrapper"><a name="GUID-1F08C1CE-0031-4527-BB17-224C67A1469F"></a></span>In addition, ICE gives you access to other scene data, such as the parameters of any
                        native Softimage property or operator, as well as custom properties. 
                     </p> 
                  </div> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-000C"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-B9C1CFC9-8BA4-40A1-9536-C8F375641F62"></a></span>What You Can Get
                  </h3> 
                  <p><span class="anchor_wrapper"><a name="GUID-34E586E5-9BB0-4BB2-B1BF-F4CF84A536AB"></a></span>You can get any data in the scene. See <span class="char_link"><a href="ICE_trees_GettingandSettingDatainICETrees.htm#WSB74EE070EB80114199F4C921243896F3-000F">Getting Data</a></span>. 
                  </p> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-000D"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-41B17B94-F971-42D2-AE9D-C683CC0D2EE0"></a></span>What You Can Set
                  </h3> 
                  <p><span class="anchor_wrapper"><a name="GUID-41CA7405-2994-4E1D-8520-ED87D7EC0E8B"></a></span>You can set certain data: 
                  </p> <span class="anchor_wrapper"><a name="UL_789DF95AB3C1443C8D0F8C96ED54A8B8"></a></span><ul>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-88E2589C-F6B7-4A58-9262-3D9B88F50F08"></a></span>Some intrinsic attributes, such as PointPosition or EdgeCrease. Other attributes are
                           read-only, like PointNormal and PolygonArea. 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-41E85AFF-6F15-417C-9BB7-BF628DC1E567"></a></span>Any dynamic attribute, including predefined ones like Force, PointVelocity, and so
                           on. 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-C3473535-2586-4060-BA7F-14AB88DA85E0"></a></span>Almost any property in Softimage. However, kinematics are special — see <span class="char_link"><a href="ikine_kinematics.htm">ICE Kinematics</a></span>. 
                        </p> 
                     </li>
                  </ul> 
                  <p><span class="anchor_wrapper"><a name="GUID-6DA8E2B7-92CF-4046-BD1B-A63ED311A6FB"></a></span>For more details about how to set data, see <span class="char_link"><a href="ICE_trees_GettingandSettingDatainICETrees.htm#WSB74EE070EB80114199F4C921243896F3-001F">Setting Data</a></span>. 
                  </p> 
               </div> 
            </div>
            <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-000E"></a></span> 
               <h2><span class="anchor_wrapper"><a name="GUID-589A0859-3611-48D0-B9F5-AFC8DB0A04D1"></a></span>Getting Data, Setting Data, and Context
               </h2>    
               <p><span class="anchor_wrapper"><a name="GUID-A26181B5-DD63-483D-9D71-33366B9782DC"></a></span>You can get data by explicit string references or at locations. 
               </p> <span class="anchor_wrapper"><a name="UL_F414C4C238EB423AA09B918D82A6C765"></a></span><ul>
                  <li> 
                     <p><span class="anchor_wrapper"><a name="GUID-FDEE437B-7525-4BC6-91FF-C1978FC8476D"></a></span>When you get data by an explicit string reference, you get a set of values with one
                        value for each component. For example, if you get "sphere.PointNormal", you get one
                        3D vector for each point of the sphere object; in other words, the context is per
                        point of sphere. 
                     </p> 
                  </li>
                  <li> 
                     <p><span class="anchor_wrapper"><a name="GUID-371F43D0-47EB-4D6A-9175-CE33B56F527C"></a></span>When you get data at a location, the context depends on the context of the set of
                        locations that is connected to the Source port of the Get Data node. For example,
                        if you start by getting "grid.PointPosition", then use that to get the closest location
                        on sphere, and in turn use that to get PointNormal, the data consists of normals on
                        the sphere but the context is per point of the grid. If instead you started by getting
                        "grid.PolygonPosition", the context would be per polygon of the grid. 
                     </p> 
                  </li>
               </ul> 
               <p><span class="anchor_wrapper"><a name="GUID-FE7B9149-EB73-4F4D-A0F9-A8682F210364"></a></span>You can set data using an explicit string reference only. You cannot set data at locations.
                  To set an attribute, the data must be in the appropriate context. For example, to
                  set PointPosition, the data must be in the per point context of the appropriate object.
                  Not all attributes can be set. 
               </p> 
            </div>
            <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-000F"></a></span> 
               <h2><span class="anchor_wrapper"><a name="GUID-24184AB0-D146-4168-8A38-184FB4C5FCAE"></a></span>Getting Data
               </h2>  
               <p><span class="anchor_wrapper"><a name="GUID-E3C682CB-6065-4983-9B7D-E3DE9BD9CB42"></a></span>You get data using Get Data nodes. There are several ways to add a Get Data node to
                  your tree. 
               </p> 
               <p><span class="anchor_wrapper"><a name="GUID-2CBC6EE9-4F3F-4554-B164-CCDEE2834F64"></a></span>You can get data before it's been set or initialized and it won't show as an error
                  (red node) until it has been plugged into the rest of the tree. 
               </p> 
               <p><span class="anchor_wrapper"><a name="GUID-B6E16D4E-A2CB-46C9-B3DF-06C3E733020F"></a></span>You can get and set ICE attributes as many times as you like in a tree — each time
                  you get an attribute, you get the latest updated values. However, you can set external
                  data, such as kinematics or a regular property value, only once per tree — if you
                  get it again after setting it, you get the original unchanged values. 
               </p> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0010"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-E96E1D62-A271-4AB6-90A5-8EB16311E299"></a></span>To add a Get Data node to an ICE tree
                  </h3> <span class="anchor_wrapper"><a name="GUID-27A0CDFE-E73A-4C77-9964-72FF9E8328B9"></a></span><ol type="1" start="1">
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-AED781CE-4859-451C-8142-047A35D022AA"></a></span>Do one of the following: 
                        </p> <span class="anchor_wrapper"><a name="UL_6A59429861AD467E9893E9F14E55F7C3"></a></span><ul>
                           <li> 
                              <p><span class="anchor_wrapper"><a name="GUID-7FF134BF-ECE1-4B90-9445-9EB8E28DCBC8"></a></span>Drag a Get Data node into the tree from the Data Access category of the Tools tab
                                 of the preset manager. The new node's reference is initially blank. 
                              </p> 
                           </li>
                           <li> 
                              <p><span class="anchor_wrapper"><a name="GUID-6103D154-B0D8-4929-8EE5-8CB14C47B5CD"></a></span>Choose <span class="MenuCascade" id="GUID-3802646B-A21E-4BA5-9DD6-CB3FC5A99272">Nodes <img src="../images/ac.menuaro.gif"> Data Access <img src="../images/ac.menuaro.gif"> Get Data</span>. Again, the new node's reference is initially blank. 
                              </p> 
                           </li>
                           <li> 
                              <p><span class="anchor_wrapper"><a name="GUID-FA0CF0D4-2E6D-4BD8-83F2-8ACDDE57C00E"></a></span>Drag an object, parameter, or other node from an explorer into the tree. Make sure
                                 to drag the element's name, not its icon. The Get Data node is pre-filled with the
                                 element's reference. 
                              </p> 
                              <p><span class="anchor_wrapper"><a name="GUID-0CCFB513-0023-4EA8-9726-B51908E86551"></a></span>If the current selection does not have a synoptic or annotation property, you can
                                 press F3 in a viewport to open a mini-explorer for the selection and drag from that.
                                 Otherwise, you can open the object's mini-explorer using Shift+F3. 
                              </p> 
                           </li>
                        </ul> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-5D0EDDD4-C2F2-4ED2-85DF-8C444417EA92"></a></span>Once you have a Get Data node in your tree, you can specify or modify the reference
                           as described in <span class="char_link"><a href="ICE_basics_SpecifyingSceneReferences.htm#WS9FE06F03DF579543AA4724145BC8BB4F-0063">Specifying Scene References</a></span>. 
                        </p> 
                     </li>
                  </ol> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0011"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-0D8159F0-6194-4224-9673-1C6330606CA2"></a></span>Getting Data at Locations
                  </h3>  
                  <p><span class="anchor_wrapper"><a name="GUID-CF804204-CBDD-4FFC-96B0-FAA71607DC41"></a></span>In addition to getting data from a string reference, you can get data from locations.
                     For example, you can get PointVelocity at particles' EmitLocation. 
                  </p> <span class="anchor_wrapper"><a name="FIG_A5F10D61D1344803A5284FE188A17946"></a></span><div class="figure-anchor"><img src="../images/GUID-CFB5E740-D488-4112-ABD5-8E1B4FB878D3-low.png"></div> 
                  <p><span class="anchor_wrapper"><a name="GUID-1E50BE2C-E245-4B85-B8F1-A83A641BBF2C"></a></span>To get data at a location, plug any location data into a Get Data node's Source port.
                     When a location is plugged into the Source port of a Get Data node in this way, its
                     Explorer button shows only the attributes that are available at that location. 
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-7CEA6075-ACF3-4412-AB1F-B3E2EAEBBA00"></a></span>You can use this technique to get data from other objects using geometry queries like
                     Get Closest Location nodes. For example, you can get PointNormal at the closest location
                     on a sphere. For more information on geometry queries, see <span class="char_link"><a href="ICE_trees_UsingGeometryQueries.htm">Using Geometry Queries</a></span>. 
                  </p> <span class="anchor_wrapper"><a name="FIG_008EC3E5C03A44928F2667AF8E3F8A50"></a></span><div class="figure-anchor"><img src="../images/GUID-2EB74FC3-B394-4CD3-B057-48FD04BF6493-low.png"></div> 
                  <p><span class="anchor_wrapper"><a name="GUID-77376E2E-5F95-4088-A260-CE5A92B4B612"></a></span>If an attribute is stored on points, you can still get it at an arbitrary location.
                     The value is interpolated among the neighboring point values. Integer values are interpolated
                     and rounded. 
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-D00F9E72-64A1-4175-949A-585B71FF5DC5"></a></span>You can convert a location on a geometry into a position (3D vector) by getting the
                     PointPosition attribute at that location. 
                  </p> <span class="anchor_wrapper"><a name="FIG_9EFC16F9F06A4816BDB7BC058FB4D92A"></a></span><div class="figure-anchor"><img src="../images/GUID-D090D989-5DC9-4B3C-B67A-0322CBD69E52-low.png"></div> 
                  <p><span class="anchor_wrapper"><a name="GUID-7F228EF9-922B-4A7C-9F46-EFA8E211F36A"></a></span>The positions returned in this way are expressed in the local coordinate system of
                     the object that the ICE tree is applied to (the "Self" object). The same is true of
                     vectors like PointNormal and PointVelocity, but they are handled as vectors rather
                     than as positions (translation is ignored). Custom 3D vector attributes are not converted
                     automatically — it's up to you to decide if they need to be converted as a position,
                     converted as a vector, or left unconverted. For information about converting between
                     reference frames, see <span class="char_link"><a href="ICE_trees_WorkingwithTransforms.htm#WSB74EE070EB80114199F4C921243896F3-0054">Converting Between Local and Global Reference Frames</a></span>. 
                  </p> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0015"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-F8DB28EE-6231-41BA-A951-838FE23E7546"></a></span>Getting Data at the Previous Frame
                  </h3>  
                  <p><span class="anchor_wrapper"><a name="GUID-48FAEF16-3C79-49FC-941D-A87B8DC0A9E3"></a></span>If you need to read attributes or other data from the previous frame, use the Get
                     Data at Previous Frame node. This can be useful if you need to interpolate values
                     between frames. 
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-4B9834A1-DD10-4A6A-9AEF-015754570E6B"></a></span>The important thing to realize about using the Get Data at Previous Frame node is
                     that only the specific data retrieved by that node is evaluated at the previous frame.
                     The following illustrations explain this in more detail. 
                  </p> <span class="anchor_wrapper"><a name="FIG_BB93A37585AB490894189480BD260C2C"></a></span><div class="figure-anchor"><img src="../images/GUID-29360650-C3CC-4894-83BD-05A17500D5B2-low.png"></div> 
                  <p><span class="anchor_wrapper"><a name="GUID-19E4CFBC-36DD-450A-8048-169150086916"></a></span>The tree above calculates the closest locations on the sphere at the previous frame
                     by getting both the point positions and the sphere at the previous frame. It then
                     gets those locations' normals at the previous frame. 
                  </p> <span class="anchor_wrapper"><a name="FIG_11688C2308F34D218DFBBFF9B8364151"></a></span><div class="figure-anchor"><img src="../images/GUID-D69BB12F-6E6D-4326-A040-2C187EF81C11-low.png"></div> 
                  <p><span class="anchor_wrapper"><a name="GUID-06B9F478-D76F-4447-AFAD-12B99325DEC9"></a></span>The tree above calculates the closest locations on the sphere at the previous frame
                     in the same way as the previous tree. It then returns those locations' normals at
                     the current frame. 
                  </p> <span class="anchor_wrapper"><a name="FIG_2E7198C432C945DABDCEEB650D86F17A"></a></span><div class="figure-anchor"><img src="../images/GUID-8B04A130-916A-47AD-A0DD-4F0DAEF0F26A-low.png"></div> 
                  <p><span class="anchor_wrapper"><a name="GUID-CF6A62BC-7F5A-469D-83C9-882E8D7D7EA2"></a></span>The tree above calculates the closest locations on the sphere at the current frame.
                     It then gets those locations' normals at the previous frame. 
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-540D492C-9937-4BF7-B23C-4A1CA14CEC97"></a></span>Be aware that the Get Data at Previous Frame node can have high processing costs,
                     depending on the amount of data that it needs to evaluate at another frame. You can
                     often improve the processing speed of your trees by storing data in custom attributes
                     for use by the next frame, instead of using Get Data at Previous Frame. 
                  </p> 
                  <div><span class="anchor_wrapper"><a name="GUID-27C4F6CD-B50B-4FE1-AC25-EB8D6330CD26"></a></span><div class="note-note"><span class="label">NOTE:</span> <span class="anchor_wrapper"><a name="UL_D89AADABBDD349FD850628DDAD0AB80E"></a></span><ul>
                           <li> 
                              <p><span class="anchor_wrapper"><a name="GUID-937BEBDC-8B6A-470F-AAF2-97EBC0D7BCCA"></a></span>If points are added and deleted, Get Data at Previous Frame returns the data for the
                                 component with the same index, not necessarily the same component. If there are no
                                 components with given indices at the previous frame, then the corresponding elements
                                 are filtered out of the data set and ignored by the downstream nodes. 
                              </p> 
                           </li>
                           <li> 
                              <p><span class="anchor_wrapper"><a name="GUID-204577C5-0E22-41CF-B0EB-591A5AC50053"></a></span>To use both Get Data at Previous Frame and Set Data with an object, whether it's the
                                 self or another one, in the same ICE tree, the object must have a Simulation region
                                 in its construction stack. This applies even if you are getting and setting different
                                 attributes. Having a Simulation region in the stack means that the lower regions of
                                 the stack will be evaluated only on the first frame of the simulation, and subsequent
                                 frames will be based on the previous frame — see <span class="char_link"><a href="ICE_basics_UnderstandingtheICEFramework.htm#WS9FE06F03DF579543AA4724145BC8BB4F-0019">ICE Trees and the Construction Stack</a></span> for more information. 
                              </p> 
                           </li>
                        </ul> 
                     </div>
                  </div> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0019"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-73086C9D-71EB-4F41-9AB0-C0071F19F341"></a></span>Getting Data on Scene Groups
                  </h3>   
                  <p><span class="anchor_wrapper"><a name="GUID-AF44E93F-D686-4F17-B37B-746D99C8B9DC"></a></span>There are special considerations for getting data on groups in the scene: 
                  </p> <span class="anchor_wrapper"><a name="UL_A53BABC92EAC4E01BE1F7E30BE85980A"></a></span><ul>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-31ED68B7-65A6-4ABF-8519-EA3BFC82B6B1"></a></span>Getting the group itself gets the union of the geometry in the group. For example,
                           you can emit particles from all polygon meshes, surfaces, and curves in a scene group.
                           
                        </p> <span class="anchor_wrapper"><a name="FIG_01AFA3F51E924D51BFE6F9E223FC95A0"></a></span><div class="figure-anchor"><img src="../images/GUID-10B89D26-4AB6-492D-B8F7-0C89E173B078-low.png"></div> 
                     </li>
                  </ul> <span class="anchor_wrapper"><a name="UL_01487EF6727346C09ADF33A3A07DAF8E"></a></span><ul>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-A6121985-145F-477D-B3C8-288B3A47BF38"></a></span>The other attributes and properties that are available to get from below the group
                           in the Get Data node's explorer are those that exist on each member of the group (intersection).
                           Getting one of these attributes or values returns an array for each member of the
                           requested data set. The size of the array is the size of the group – you can use a
                           Get Array Size node to return this value. 
                        </p> 
                        <p><span class="anchor_wrapper"><a name="GUID-3299759A-1A27-477D-B95D-7F1FA962952C"></a></span>The order of elements in the array corresponds to the creation order of the members
                           of the group. You can modify this order, if desired. In an explorer, choose <span class="MenuCascade" id="GUID-7C9885E1-2916-43FC-8D0B-221782993E21">View <img src="../images/ac.menuaro.gif"> General <img src="../images/ac.menuaro.gif"> Sort <img src="../images/ac.menuaro.gif"> None</span><span class="MenuCascade" id="GUID-1E4F0EBD-35A5-4F4E-B80A-15CB7807B76D"> (creation)</span>, activate <span class="MenuCascade" id="GUID-9268E7B4-3740-45FD-8E64-57DC572B2534">View <img src="../images/ac.menuaro.gif"> Reorder Tool</span>, and drag and drop nodes within the group. The order is preserved when you save and
                           reopen the scene. For more information, see <span class="char_link"><a href="3dexplorer510.htm#WS048B4B56E6774847810BFA5D3F1134D0-0051">Sorting and Reordering Elements in the Explorer</a></span>. 
                        </p> 
                        <p><span class="anchor_wrapper"><a name="GUID-BDF13DEB-5A3F-4425-8C04-E15E09D2196E"></a></span>When getting per-component data, such as PointPosition, the results are correct only
                           when all objects in the group have the same number of components. As a workaround,
                           one possible way to get, for example, all point locations is to plug the Get Data
                           (group) node's value into the Geometry port of a Generate Sample Set node with Emission
                           Type set to Point and Rate Type set to All Points. 
                        </p> 
                     </li>
                  </ul> 
                  <p><span class="anchor_wrapper"><a name="GUID-3CB05658-DD17-4BC3-8908-0792D82EB815"></a></span>As an alternative to using scene groups, you can use the Group Geometry node to combine
                     geometric objects for querying. See <span class="char_link"><a href="ICE_trees_UsingGeometryQueries.htm">Using Geometry Queries</a></span>. 
                  </p> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-001B"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-F0A43CC4-6DAB-43E1-9060-A3B3CB44A780"></a></span>Reusing Get Data Nodes
                  </h3> 
                  <p><span class="anchor_wrapper"><a name="GUID-9C2FCE0F-8534-4888-A830-FFBC89E4307E"></a></span>You can connect the same Get Data node to as many nodes as you want if you need the
                     same data elsewhere in the tree. However if the data has changed in-between, the Get
                     Data node will return the new data later in the tree. 
                  </p> <span class="anchor_wrapper"><a name="FIG_AA75BE90881145E7950FA21C1502B5B2"></a></span><div class="figure-anchor"><img src="../images/GUID-0C2E0280-AFE1-47C6-89E5-EFE7A0A74927-low.png"></div> 
                  <p><span class="anchor_wrapper"><a name="GUID-89E6403C-5A96-40D5-912D-46BFE3FAE2C4"></a></span>The Get Self.Foo node returns different values to Stuff and More Stuff because Self.Foo
                     was set in-between. 
                  </p> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-001D"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-E514C65C-F984-49D5-B719-702C38EC15DE"></a></span>How Data Is Interpolated at Locations
                  </h3> 
                  <p><span class="anchor_wrapper"><a name="GUID-76A2FDDF-A87D-495F-BC17-3DA5EA8A6E82"></a></span>When you get data at locations: 
                  </p> <span class="anchor_wrapper"><a name="UL_4C5D5F2C9D804F6D967B4F717A165C97"></a></span><ul>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-E35B914A-5513-4C9B-B485-DFAB1ACFEF95"></a></span>Attributes that belong to points, edges, and samples are interpolated from the surrounding
                           components. The exceptions are certain NURBS-related attributes such as PointBinormal,
                           which are calculated directly at locations on NURBS surfaces and curves. 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-6F28B25D-F6D2-4E24-9D95-A805B973EAC9"></a></span>Attributes that belong to polygons and objects are not interpolated. The values returned
                           are always those of the underlying polygon or object. 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-DDE76A0C-20CA-4DB2-AB17-0DE9B238994E"></a></span>When integers and Booleans get interpolated, they get rounded to the nearest value.
                           
                        </p> 
                     </li>
                  </ul> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-001E"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-B58E1F62-A2F4-4718-87BB-A1FA146ACFEB"></a></span>Reference Frames
                  </h3> 
                  <p><span class="anchor_wrapper"><a name="GUID-3C7B1722-60DC-459A-88BB-A09FCB0666C9"></a></span>When you use an explicit string reference to get transformation-dependent attributes
                     such as positions, vectors, rotations, and so on, the raw, untransformed values are
                     returned. These are typically expressed relative to the local space of the object
                     that owns the components. For example, if you get "grid.PointPosition", the values
                     are relative to the grid's local reference frame. 
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-5AE1AEC7-5046-453D-8827-56AEF64C1D83"></a></span>When you get data at a location, the following attributes are automatically converted
                     to the reference frame of the "self" object (that is, the object with the ICE tree):
                     
                  </p> <span class="anchor_wrapper"><a name="UL_074253EC731C4738B086D74EB26AA9E5"></a></span><ul>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-39772B76-F9A6-4D78-9B51-B3926F48A2E4"></a></span>PointPosition 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-4B516B11-DA91-4229-9D6C-05B145F24387"></a></span>PointNormal 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-E764A9CC-3263-4FD4-A731-3EF1E1DDC2AE"></a></span>PointTangent 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-0DB6B08B-8899-4A63-B3DE-87E15299A5FE"></a></span>PointBinormal 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-6DCA6031-6D81-47B0-B4B2-996F98FAC1D1"></a></span>SurfaceGeometricNormal 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-154D09CE-C0B5-490F-B28B-6C30B8CDFB97"></a></span>PointReferenceFrame 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-7D534080-2E63-4378-8F3C-D9B036BD86ED"></a></span>EdgeReferenceFrame 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-6F75D1D2-B01A-4A1E-A831-A8D2E24014AD"></a></span>PolygonRefFrame 
                        </p> 
                     </li>
                  </ul> 
                  <p><span class="anchor_wrapper"><a name="GUID-581F8A5E-72CC-4E3A-AFEC-CE49483EF8BC"></a></span>Other attributes are unconverted when you get them at a location. They are expressed
                     in terms of the local reference frame of the object that owns them. 
                  </p> 
               </div> 
            </div>
            <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-001F"></a></span> 
               <h2><span class="anchor_wrapper"><a name="GUID-F0226CA8-5D0C-42B6-AAB0-B6F073DD0481"></a></span>Setting Data
               </h2>  
               <p><span class="anchor_wrapper"><a name="GUID-EBCDB9AB-7E05-4521-84DF-15C2D0E54979"></a></span>To set data, use the Set Data compound. Simply specify the desired reference and value,
                  either through connections or directly in the property editor. See <span class="char_link"><a href="ICE_basics_SpecifyingSceneReferences.htm#WS9FE06F03DF579543AA4724145BC8BB4F-0063">Specifying Scene References</a></span>. 
               </p> 
               <p><span class="anchor_wrapper"><a name="GUID-7A1E5B61-3976-41C0-BDB4-BCF15405EFC9"></a></span>Not all attributes can be set. Read-only attributes like NbPoints are not shown in
                  the Set Data node's explorer. 
               </p> 
               <p><span class="anchor_wrapper"><a name="GUID-CD3F2D19-176C-42BD-9597-174A6873C763"></a></span>Once you specify a reference, the displayed name of the input port changes from Value
                  to the name of the reference. If you connect a reference to the Set Data node's In
                  Name, it is prefixed to all references defined in the Set Data node itself. This lets
                  you use one Set Data node to set several attributes on the same object. However, when
                  an object name is connected to In Name, you must add ports and specify their references
                  before you can connect values; this is because the object name by itself does not
                  resolve to any data type. 
               </p> 
               <p><span class="anchor_wrapper"><a name="GUID-A757A153-E9F4-43D1-8824-C96C18441456"></a></span>If you set ICE attributes and then get them later in the same tree, you get the modified
                  values. However, you can set external data, such as kinematics or a regular property
                  value, only once per tree — if you get it again after setting it, you get the original
                  unchanged values. 
               </p> 
               <p><span class="anchor_wrapper"><a name="GUID-D8177859-1B18-4597-81DD-34AF6EDF7F45"></a></span>If data has been set for some but not all components in a data set, uninitialized
                  components have default values: zero for most data types, false for Booleans, identity
                  for matrices, black for color, etc. 
               </p> 
               <p><span class="anchor_wrapper"><a name="GUID-6D76B8C5-AEFB-4B40-A35D-074724EB15D1"></a></span>Attributes whose names begin with two underscore characters ("__") are hidden and
                  not shown in attribute explorers. This can be useful if you have internal "bookkeeping"
                  attributes inside compounds that you don't want users to fiddle with. 
               </p> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0020"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-D7876E0B-6C1F-4F06-9258-AF212A74BD79"></a></span>Beware of ICE Optimizations
                  </h3> 
                  <p><span class="anchor_wrapper"><a name="GUID-212BB735-7D5D-470D-AAF7-A8EA3B2401FC"></a></span>If you try to set data but never use it anywhere in the scene, it never actually gets
                     set because of how ICE is optimized. This applies not only to custom attributes, but
                     also to dynamic attributes — for example, if you try to set PointVelocity but don't
                     use a Simulate node to update point positions, then PointVelocity does not get set.
                     
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-EFC22DF2-0805-4A56-9366-EECB8B41F1FF"></a></span>Among other things, this can have the following consequences: 
                  </p> <span class="anchor_wrapper"><a name="UL_783E21620FAE4E319E4DF60E0E60ED3D"></a></span><ul>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-9E93D6E5-72AB-4387-A065-861DDE56A7DF"></a></span>Caches may be missing data that you expect to be there. 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-85F71C28-9424-4752-BDC4-2F12F284CB40"></a></span>If you freeze a tree that initializes data before creating another tree that uses
                           that data, the data will be missing. 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-7BD4DD42-1468-4DB0-BB64-7EBBCFA27F1B"></a></span>The ICEAttribute.IsDefined property of the SDK is sometimes misleading. 
                        </p> 
                     </li>
                  </ul> 
                  <p><span class="anchor_wrapper"><a name="GUID-8DFEB8EE-15EA-41DF-B66D-671EA5480E9C"></a></span>You can force data to be evaluated and set in a couple of ways: 
                  </p> <span class="anchor_wrapper"><a name="UL_D0620ACF239F4C239F090885D633E773"></a></span><ul>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-9F446314-48A1-43EF-B333-BEAB7BF1E873"></a></span>Display the data values in the viewport. See <span class="char_link"><a href="ICE_trees_DebuggingICETrees.htm#WSB74EE070EB80114199F4C921243896F3-0092">Displaying Port Values</a></span>. 
                        </p> 
                     </li>
                     <li> 
                        <p><span class="anchor_wrapper"><a name="GUID-D7E80783-14A5-4D3A-B093-D303052D7BCF"></a></span>Use the data to set real data in the scene, for example, set weight map values or
                           use the data in the render tree. 
                        </p> 
                     </li>
                  </ul> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0021"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-454D5A03-BB79-43CE-B16A-EA8C0F97E228"></a></span>Initializing Data
                  </h3> 
                  <p><span class="anchor_wrapper"><a name="GUID-233D581A-2E46-4A07-B6EA-47762BF4F8FC"></a></span>To initialize data, simply set it. 
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-AAEC737F-B40D-4A48-89EF-64A703E3BC53"></a></span>To set initial values for particles that have been generated on the current frame,
                     plug a Set Data node into the Execute on Emit, Execute on Spawn, or On Creation port
                     of the appropriate node. 
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-10F2C857-5E27-4690-B231-4F984C53C8BE"></a></span>If you can't plug a Set Data node into one of those ports — for example, if you are
                     creating a compound that does one thing to new particles and another thing to old
                     particles — you can filter on the Init attribute. See <span class="char_link"><a href="ICE_trees_ControllingExecutioninICETrees.htm#WSB74EE070EB80114199F4C921243896F3-002A">If versus Filter</a></span>. 
                  </p> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0022"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-CFF7086B-E514-437B-8090-AA1DE60F0FB9"></a></span>Setting Custom Attributes
                  </h3>  
                  <p><span class="anchor_wrapper"><a name="GUID-076525E6-4227-4BDF-A86E-D7A9E32A095B"></a></span>To create a custom attribute, simply use a Set Data node and make up a new attribute
                     name. For a list of attribute names that are already used in ICE, see <span class="char_link"><a href="iceref_attributes_a.htm">ICE Attributes</a></span>. Don't forget to include the full reference including the object name in the Set
                     Data node, for example, "PointCloud.my_custom_attribute". 
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-183F0DD9-C74C-43BD-B835-AA07D420DB0D"></a></span>You can use custom attributes to store any type of value, including locations. The
                     context and data type of custom attributes are determined by the connected nodes.
                     If the data type is undetermined, the Set Data node is in error (red) — you can use
                     a node from the Constant category to force a specific data type. If the context is
                     undetermined, it defaults to the object context. However, this context can be changed
                     to a component context if you connect nodes that force a different context, as long
                     as there are no conflicting constraints on the context. 
                  </p> 
               </div> 
               <div class="section"><span class="anchor_wrapper"><a name="WSB74EE070EB80114199F4C921243896F3-0023"></a></span> 
                  <h3><span class="anchor_wrapper"><a name="GUID-70AB2E29-9170-406D-A928-C2A9B3F90598"></a></span>Delaying Set Data
                  </h3> 
                  <p><span class="anchor_wrapper"><a name="GUID-2CCC2EA0-43AA-4A23-986C-888088587752"></a></span>The Delay Set Data node holds the results for all Set Data nodes anywhere in the upstream
                     nodes and executes them all at once. This allows you to set attributes that depend
                     on each other. For example, you can swap values. 
                  </p> <span class="anchor_wrapper"><a name="TABLE_222033E822204E878F179213CDCA62C2"></a></span><div class="table_NotRuled">
                     <table cellpadding="0" cellspacing="0" class="not-ruled">
                        <colgroup>
                           <col>
                           <col>
                        </colgroup>
                        <tr class="not-ruledOddRow">
                           <td class="table-body">&nbsp; <img src="../images/GUID-54E3119C-D291-44D2-890F-7250FFDA9242-low.png"> 
                           </td>
                           <td class="table-body"> <span class="anchor_wrapper"><a name="GUID-B8D7F61F-94A8-4EB3-9987-242774D0162D"></a></span><p class="table-body">In the first example, the value of A is written to B, and then the value of B (which
                                 is now the old value of A) is written back to A again. 
                              </p> <span class="anchor_wrapper"><a name="GUID-2F747D57-8148-426F-877E-BCAB82FE7A0F"></a></span><p class="table-body">At the end, both A and B have the original value of A. </p> 
                           </td>
                        </tr>
                        <tr class="not-ruledEvenRow">
                           <td class="table-body">&nbsp; <img src="../images/GUID-28F0591A-F01F-4DE9-AFB0-C9B5444DFED3-low.png"> 
                           </td>
                           <td class="table-body"> <span class="anchor_wrapper"><a name="GUID-BC33153C-A85A-4BEB-AD37-1775798EE946"></a></span><p class="table-body">With Delay Set Data, B is set to the value of A but it is not written yet. Then A
                                 is set to the value of B and both get written together. 
                              </p> <span class="anchor_wrapper"><a name="GUID-D412B3D7-2E0E-4702-B715-2F0C1F8D81B6"></a></span><p class="table-body">At the end, A has the original value of B and B has the original value of A. </p> 
                           </td>
                        </tr>
                     </table>
                  </div> 
               </div> 
            </div>
         </div>
         <div class="footer-block"><a href="../html/ac.cmtdialog.htm" class="comments-anchor" target="_blank"><span class="comments-link">Please send us your comment about this page</span></a></div><br><p class="footer-license-block"><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank"><img alt="Creative Commons License" style="border-width: 0;" src="../images/ccLink.png"></a>&nbsp;<em>Except where otherwise noted, this work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>. Please see the <a href="http://autodesk.com/creativecommons" target="_blank">Autodesk Creative Commons FAQ</a> for more information.</em></p><br></div>
   </body>
</html>